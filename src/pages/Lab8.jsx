import React, { useState, useEffect, useMemo } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { useReactTable,
    getCoreRowModel,
    getFilteredRowModel,
    getSortedRowModel,
    getPaginationRowModel
} from '@tanstack/react-table';
import Container from '../components/Container';
import Message from '../components/Message';
import Button from '../components/Button';
import useLoginState from '../hooks/useLoginState';
import { fetchUsers } from '../store/usersSlice';
import { fetchFeedbacks, deleteFeedback } from '../store/feedbackSlice';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫
const DefaultColumnFilter = ({
                                 column: { filterValue, preFilteredRows, setFilter },
                             }) => {
    const count = preFilteredRows.length;

    return (
        <input
            value={filterValue || ''}
            onChange={e => {
                setFilter(e.target.value || undefined);
            }}
            placeholder={`–ü–æ–∏—Å–∫ ${count} –∑–∞–ø–∏—Å–µ–π...`}
            style={{ width: '100%', padding: '0.5rem', marginTop: '0.5rem' }}
        />
    );
};

const Table = ({ columns, data }) => {
    const filterTypes = useMemo(
        () => ({
            text: (rows, id, filterValue) => {
                return rows.filter(row => {
                    const rowValue = row.values[id];
                    return rowValue !== undefined
                        ? String(rowValue)
                            .toLowerCase()
                            .startsWith(String(filterValue).toLowerCase())
                        : true;
                });
            },
        }),
        []
    );

    const defaultColumn = useMemo(
        () => ({
            Filter: DefaultColumnFilter,
        }),
        []
    );

    const {
        getTableProps,
        getTableBodyProps,
        headerGroups,
        prepareRow,
        page,
        canPreviousPage,
        canNextPage,
        pageOptions,
        pageCount,
        gotoPage,
        nextPage,
        previousPage,
        setPageSize,
        state: { pageIndex, pageSize },
    } = useTable(
        {
            columns,
            data,
            defaultColumn,
            filterTypes,
            initialState: { pageIndex: 0, pageSize: 5 },
        },
        useFilters,
        useSortBy,
        usePagination
    );

    return (
        <>
            <table {...getTableProps()} style={{ width: '100%', borderCollapse: 'collapse' }}>
                <thead>
                {headerGroups.map(headerGroup => (
                    <tr {...headerGroup.getHeaderGroupProps()}>
                        {headerGroup.headers.map(column => (
                            <th
                                {...column.getHeaderProps(column.getSortByToggleProps())}
                                style={{
                                    borderBottom: 'solid 3px #ddd',
                                    background: '#f0f0f0',
                                    color: 'black',
                                    fontWeight: 'bold',
                                    padding: '0.5rem',
                                    textAlign: 'left',
                                }}
                            >
                                {column.render('Header')}
                                <span>
                    {column.isSorted
                        ? column.isSortedDesc
                            ? ' üîΩ'
                            : ' üîº'
                        : ''}
                  </span>
                                <div>{column.canFilter ? column.render('Filter') : null}</div>
                            </th>
                        ))}
                    </tr>
                ))}
                </thead>
                <tbody {...getTableBodyProps()}>
                {page.map((row, i) => {
                    prepareRow(row);
                    return (
                        <tr {...row.getRowProps()} style={{
                            background: i % 2 === 0 ? 'white' : '#f9f9f9'
                        }}>
                            {row.cells.map(cell => {
                                return (
                                    <td
                                        {...cell.getCellProps()}
                                        style={{
                                            padding: '0.5rem',
                                            border: 'solid 1px #ddd',
                                        }}
                                    >
                                        {cell.render('Cell')}
                                    </td>
                                );
                            })}
                        </tr>
                    );
                })}
                </tbody>
            </table>

            <div className="pagination" style={{ marginTop: '1rem', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <div>
                    <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>
                        {'<<'}
                    </button>{' '}
                    <button onClick={() => previousPage()} disabled={!canPreviousPage}>
                        {'<'}
                    </button>{' '}
                    <button onClick={() => nextPage()} disabled={!canNextPage}>
                        {'>'}
                    </button>{' '}
                    <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>
                        {'>>'}
                    </button>
                </div>
                <div>
          <span>
            –°—Ç—Ä–∞–Ω–∏—Ü–∞{' '}
              <strong>
              {pageIndex + 1} –∏–∑ {pageOptions.length}
            </strong>{' '}
          </span>
                    <span>
            | –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:{' '}
                        <input
                            type="number"
                            defaultValue={pageIndex + 1}
                            onChange={e => {
                                const page = e.target.value ? Number(e.target.value) - 1 : 0;
                                gotoPage(page);
                            }}
                            style={{ width: '50px' }}
                        />
          </span>{' '}
                    <select
                        value={pageSize}
                        onChange={e => {
                            setPageSize(Number(e.target.value));
                        }}
                    >
                        {[5, 10, 20, 30, 40, 50].map(pageSize => (
                            <option key={pageSize} value={pageSize}>
                                –ü–æ–∫–∞–∑–∞—Ç—å {pageSize}
                            </option>
                        ))}
                    </select>
                </div>
            </div>
        </>
    );
};

const Lab8 = () => {
    const isLoggedIn = useLoginState();
    const dispatch = useDispatch();
    const { user, role } = useSelector(state => state.auth);
    const users = useSelector(state => state.users.users);
    const feedbacks = useSelector(state => state.feedback.feedbacks);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    useEffect(() => {
        if (isLoggedIn) {
            setLoading(true);
            Promise.all([
                dispatch(fetchUsers()),
                dispatch(fetchFeedbacks())
            ])
                .then(() => setLoading(false))
                .catch(err => {
                    setError(err?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
                    setLoading(false);
                });
        }
    }, [dispatch, isLoggedIn]);

    const handleDeleteFeedback = (id) => {
        if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤?')) {
            dispatch(deleteFeedback(id));
        }
    };

    const userColumns = useMemo(
        () => [
            {
                Header: 'ID',
                accessor: 'id',
            },
            {
                Header: '–ò–º—è',
                accessor: 'name',
            },
            {
                Header: 'Email',
                accessor: 'email',
            },
            {
                Header: '–†–æ–ª—å',
                accessor: 'role',
                Filter: ({ column }) => {
                    const { filterValue, setFilter } = column;
                    return (
                        <select
                            value={filterValue || ''}
                            onChange={e => setFilter(e.target.value || undefined)}
                            style={{ width: '100%', padding: '0.5rem' }}
                        >
                            <option value="">–í—Å–µ</option>
                            <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                            <option value="user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</option>
                        </select>
                    );
                },
            },
            {
                Header: '–î–µ–π—Å—Ç–≤–∏—è',
                accessor: 'actions',
                Cell: ({ row }) => (
                    <div>
                        <Button
                            onClick={() => alert(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${row.original.name}`)}
                            style={{ marginRight: '0.5rem' }}
                        >
                            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </Button>
                    </div>
                ),
                disableFilters: true,
            },
        ],
        []
    );

    const feedbackColumns = useMemo(
        () => [
            {
                Header: 'ID',
                accessor: 'id',
            },
            {
                Header: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                accessor: 'name',
            },
            {
                Header: '–î–∞—Ç–∞',
                accessor: 'date',
            },
            {
                Header: '–°–æ–æ–±—â–µ–Ω–∏–µ',
                accessor: 'message',
            },
            {
                Header: '–û—Ü–µ–Ω–∫–∞',
                accessor: 'rating',
                Filter: ({ column }) => {
                    const { filterValue, setFilter } = column;
                    return (
                        <select
                            value={filterValue || ''}
                            onChange={e => setFilter(e.target.value || undefined)}
                            style={{ width: '100%', padding: '0.5rem' }}
                        >
                            <option value="">–í—Å–µ</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                            <option value="3">3</option>
                            <option value="4">4</option>
                            <option value="5">5</option>
                        </select>
                    );
                },
            },
            {
                Header: '–î–µ–π—Å—Ç–≤–∏—è',
                accessor: 'actions',
                Cell: ({ row }) => (
                    <div>
                        <Button
                            onClick={() => alert(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç ${row.original.name}`)}
                            style={{ marginRight: '0.5rem' }}
                        >
                            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </Button>
                        <Button
                            onClick={() => handleDeleteFeedback(row.original.id)}
                        >
                            –£–¥–∞–ª–∏—Ç—å
                        </Button>
                    </div>
                ),
                disableFilters: true,
            },
        ],
        [handleDeleteFeedback]
    );

    if (!isLoggedIn) {
        return (
            <div>
                <h2>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è 8</h2>
                <Message type="warning">
                    –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π 5.
                </Message>
            </div>
        );
    }

    if (loading) {
        return (
            <div>
                <h2>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è 8</h2>
                <Message type="info">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</Message>
            </div>
        );
    }

    if (error) {
        return (
            <div>
                <h2>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è 8</h2>
                <Message type="error">–û—à–∏–±–∫–∞: {error}</Message>
            </div>
        );
    }

    return (
        <div>
            <h2>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è 8</h2>

            <Container>
                <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</h3>
                <div style={{ textAlign: 'left', margin: '1rem' }}>
                    <p><strong>–ò–º—è:</strong> {user.name}</p>
                    <p><strong>Email:</strong> {user.email}</p>
                    <p><strong>–†–æ–ª—å:</strong> {role || 'user'}</p>
                </div>
                <Message type="info">
                    –í –¥–∞–Ω–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —Ä–æ–ª–µ–π admin –∏ user.
                    {role !== 'admin' && " –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å —Ä–æ–ª—å admin."}
                </Message>
            </Container>

            {role === 'admin' && (
                <Container>
                    <h3>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
                    <div style={{ overflowX: 'auto' }}>
                        <Table columns={userColumns} data={users} />
                    </div>
                </Container>
            )}

            <Container>
                <h3>–°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤</h3>
                <div style={{ overflowX: 'auto' }}>
                    <Table columns={feedbackColumns} data={feedbacks} />
                </div>
            </Container>
        </div>
    );
};

export default Lab8;